#!/usr/bin/env node

import dotenv from "dotenv";
dotenv.config();
import debug from "debug";
import http from "node:http";
import app from "../app.js";
import { logInfo, logError } from "../src/utils/logger.js";
import { connectToDb, initializeDbSchema } from "../src/config/db.js";

// Set up debug and port
const dbg = debug("feature-rich-url-shortener-api:server");
const PORT = normalizePort(process.env.PORT || "3000");
const INIT_DB = process.env.INIT_DB === "true";

// Create server
const server = http.createServer(app);

// Normalize port utility
function normalizePort(val) {
  const port = parseInt(val, 10);
  return isNaN(port) ? val : port >= 0 ? port : false;
}

// Handle graceful shutdown signals
["SIGHUP","SIGINT", "SIGTERM"].forEach((signal) => {
  process.on(signal, () => gracefulShutdown(signal));
});

async function gracefulShutdown(signal) {
  logInfo(`📴 Received ${signal}. Gracefully shutting down...`);
  try {
    server.close(() => {
      logInfo("🛑 Server closed.");
      process.exit(0);
    });
  } catch (error) {
    logError("❌ Error closing server:", error);
    process.exit(1);
  }
}

// Handle server error events
function onError(error) {
  if (error.syscall !== "listen") throw error;

  const bind = typeof PORT === "string" ? `Pipe ${PORT}` : `Port ${PORT}`;
  switch (error.code) {
    case "EACCES":
      logError(`${bind} requires elevated privileges`);
      process.exit(1);
    case "EADDRINUSE":
      logError(`${bind} is already in use`);
      process.exit(1);
    default:
      throw error;
  }
}

// Handle server listening event
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
  dbg(`Listening on ${bind}`);
  logInfo(`🚀 Server running on ${bind}`);
}

// Start the server
async function startServer() {
  try {
    logInfo("🔌 Connecting to database...");
    await connectToDb();

    if (INIT_DB) {
      logInfo("📦 INIT_DB=true: Running schema initialization...");
      await initializeDbSchema();
    }

    server.listen(PORT);
    server.on("error", onError);
    server.on("listening", onListening);
  } catch (error) {
    logError("🚨 Server startup failed:", error);
    process.exit(1);
  }
}

startServer();
